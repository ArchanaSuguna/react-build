{"version":3,"sources":["logo.svg","App.js","Posts.js","serviceWorker.js","Employee.js","components/Person.js","index.js"],"names":["module","exports","App","React","Component","Boolean","window","location","hostname","match","Person","addUser","rawData","name","state","age","place","tempUser","users","push","setState","delUser","index","temp","splice","editUser","userData","i","btn_status","updated_index","updateUser","tempData","map","user","btn_content","this","onClick","value","onChange","e","target","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4FAAAA,EAAOC,QAAU,IAA0B,kC,4KCyB5BC,I,oDCtBKC,IAAMC,UCSNC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DChBkBN,IAAMC,U,ICsJfM,E,YArJX,aAAc,IAAD,8BACT,+CAmBJC,QAAS,WAEL,IAAIC,EAAU,CACVC,KAAO,EAAKC,MAAMD,KAClBE,IAAM,EAAKD,MAAMC,IACjBC,MAAQ,EAAKF,MAAME,OAInBC,EAAW,EAAKH,MAAMI,MAC1BD,EAASE,KAAKP,GACd,EAAKQ,SAAS,CACVF,MAAQD,EAERJ,KAAO,GACPE,IAAM,GACNC,MAAQ,MApCH,EA6CbK,QAAU,SAACC,GACP,IAAIC,EAAO,EAAKT,MAAMI,MAExBK,EAAKC,OAAOF,EAAO,GACjB,EAAKF,SAAS,CACVF,MAAQK,KAlDH,EAwDbE,SAAW,SAACC,EAAUC,GAElB,EAAKP,SAAS,CACVP,KAAOa,EAASb,KAChBE,IAAMW,EAASX,IACfC,MAAQU,EAASV,MACjBY,YAAa,EACbC,cAAgBF,KA/DX,EAsEbG,WAAa,WAMX,IAAIC,EAAY,EAAKjB,MAAMI,MAAMc,KAAI,SAACC,EAAMN,GACvC,OAAG,EAAKb,MAAMe,eAAiBF,EACvB,CAEPd,KAAO,EAAKC,MAAMD,KAClBE,IAAM,EAAKD,MAAMC,IACjBC,MAAQ,EAAKF,MAAME,OAGbiB,KAGX,EAAKb,SAAS,CACXF,MAAQa,KAvFV,EAAKjB,MAAQ,CACZc,YAAa,EACbC,cAAgB,GACbX,MAAO,CAMP,CACIL,KAAO,GACPE,IAAM,GACNC,MAAO,MAdN,E,sEAoGJ,IAAD,OAEHkB,EAAc,KAQf,OANCA,EADDC,KAAKrB,MAAMc,WACK,4BAAQQ,QAASD,KAAKxB,SAAtB,YAGA,4BAAQyB,QAASD,KAAKL,YAAtB,eAIZ,uCACW,2BAAOO,MAAOF,KAAKrB,MAAMD,KAAMyB,SAAU,SAACC,GAAD,OAAO,EAAKnB,SAAS,CACjEP,KAAO0B,EAAEC,OAAOH,WACf,6BAHT,SAIU,2BAAOA,MAAOF,KAAKrB,MAAMC,IAAKuB,SAAU,SAACC,GAAD,OAAM,EAAKnB,SAAS,CAC/DL,IAAMwB,EAAEC,OAAOH,WAGf,6BARP,WASY,2BAAOA,MAAOF,KAAKrB,MAAME,MAAOsB,SAAU,SAACC,GAAD,OAAK,EAAKnB,SAAS,CACnEJ,MAAQuB,EAAEC,OAAOH,WACd,6BAIZH,EACG,+BACI,sCACA,qCACA,uCAEFC,KAAKrB,MAAMI,MAAMc,KAAI,SAACC,EAAMN,GACzB,OACI,4BACE,4BAAKM,EAAKpB,MACV,4BAAKoB,EAAKlB,KACV,4BAAKkB,EAAKjB,OACV,4BAAI,4BAAQoB,QAAS,kBAAK,EAAKf,QAAQM,KAAnC,QACJ,4BAAI,4BAAQS,QAAS,kBAAM,EAAKX,SAASQ,EAAMN,KAA3C,mB,GA7INxB,IAAMC,WCQ3BqC,IAASC,OAAO,kBAAC,EAAD,MAAYC,SAASC,eAAe,SHwH9C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.31fe1d93.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\"\r\nimport axios from 'axios'\r\n\r\nclass Posts extends React.Component{\r\n\r\n   state = {\r\n       posts : []\r\n}\r\n\r\ncomponentDidMount(){\r\naxios.get(\"https://jsonplaceholder.typicode.com/photos\").then((res)=> {\r\nconsole.log(\"The response is\", res.data);\r\nthis.setState({\r\n    posts : res.data\r\n})\r\n}).catch((err) => {\r\n    console.log(\"The err is\", err);\r\n})\r\n\r\n}\r\n\r\nrender(){\r\n\r\n    return(\r\n        <div>\r\n           <table>\r\n               <th>Pic</th><th>Title</th>\r\n               {this.state.posts.map((post) => {\r\n                return (\r\n                <tr>\r\n                 <td>{post.title}</td>\r\n                 <img src={post.thumbnailUrl} width=\"100\" height=\"100\"/>\r\n\r\n               \r\n                 </tr>)\r\n               })}\r\n               </table>  \r\n        </div>\r\n    )\r\n}\r\n}\r\n\r\nexport default Posts;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\n \r\nclass Employees extends React.Component{\r\n \r\nconstructor(){\r\n super();\r\n this.state = {\r\n    index_ele : '',\r\n    btn_stt : false,\r\n    name : \"Archaa\",\r\n    age : \"24\",\r\n    pic : \"hdj\",\r\n    emps : [\r\n      {\r\n        \r\n      }\r\n    ]\r\n  }\r\n }\r\n  \r\n saveRecord = ()=>{\r\n let rawData = {\r\n  name : this.state.name,\r\n  age : this.state.age,\r\n  pic : this.state.pic\r\n }\r\n let tmpEmps = this.state.emps;\r\n tmpEmps.push(rawData);\r\n this.setState({\r\n  emps : tmpEmps,\r\n  name : \"\",\r\n  age : \"\",\r\n  pic : \"\"\r\n })\r\n }\r\n  \r\n delEmp = (index)=>{\r\n  \r\n let tmpEmps = this.state.emps;\r\n tmpEmps.splice(index,1);\r\n this.setState({\r\n  emps : tmpEmps\r\n })\r\n  \r\n }\r\n  \r\n edtEmp = (emp,index)=>{\r\n this.setState({\r\n  name : emp.name,\r\n  age : emp.age,\r\n  pic : emp.pic,\r\n  btn_stt : true,\r\n  index_ele : index\r\n  \r\n })\r\n }\r\n  \r\n updateRecord = ()=>{\r\n  let rawEmp = {\r\n    name : this.state.name,\r\n    age : this.state.age,\r\n    pic : this.state.pic\r\n  }\r\n  let tmpEmps = this.state.emps;\r\n tmpEmps=tmpEmps.map((emp,i)=>{\r\n  if(i==this.state.index_ele){\r\n    return {\r\n      name : this.state.name,\r\n      age : this.state.age,\r\n      pic : this.state.pic\r\n    }\r\n  }\r\n  return emp;\r\n })\r\n this.setState({\r\n  emps : tmpEmps\r\n })\r\n }\r\n  \r\n render(){\r\n  let btnContent = null;\r\n  if(this.state.btn_stt){\r\n btnContent = (\r\n  <button  onClick={this.updateRecord}>Update Record</button>\r\n )\r\n  }\r\n else\r\n {\r\n  btnContent = (\r\n  <button  onClick={this.saveRecord}>Save Record</button>\r\n  )\r\n }\r\n   return (\r\n    <div>\r\n <div className=\"\">\r\n Name : <input value={this.state.name} onChange={(evt)=>this.setState({name : evt.target.value})\r\n }/><br/>\r\n Age : <input value={this.state.age} onChange={(evt)=>{\r\n  this.setState({\r\n    age : evt.target.value\r\n  })\r\n }}/><br/>\r\n Picture : <input value={this.state.pic} onChange={(evt)=>{\r\n  this.setState({\r\n    pic : evt.target.value\r\n  })\r\n }}/><br/><hr/>\r\n {btnContent}\r\n  \r\n <hr/>\r\n <table>\r\n <th>Name</th><th>Age</th><th>Image</th><th>Action</th>\r\n {\r\n  this.state.emps.map((emp,x)=>{\r\n    //Here map second metod is in that is index of array\r\n    return (\r\n <tr>\r\n <td>{emp.name}</td>\r\n <td>{emp.age}</td>\r\n <td><img src={emp.pic} width=\"50\" height=\"50\"/></td>\r\n <td>\r\n <button onClick={()=>this.delEmp(x)}>Delete</button> |\r\n <button onClick={()=>this.edtEmp(emp,x)}>Edit</button>\r\n </td>\r\n </tr>\r\n    )\r\n  })\r\n }\r\n  \r\n  \r\n </table>\r\n </div>\r\n  \r\n    </div>\r\n  )\r\n }\r\n  \r\n }\r\n  \r\n export default Employees;\r\n ","import React from \"react\"\r\nclass Person extends React.Component{\r\n\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n         btn_status : true,\r\n         updated_index : \"\",\r\n            users :[\r\n            // {\r\n            //     name : \"Archu\",\r\n            //     age : \"21\",\r\n            //     place: \"Smg\"\r\n            // },\r\n            {\r\n                name : \"\",\r\n                age : \"\",\r\n                place: \"\" \r\n            }\r\n        ]\r\n        }\r\n    }\r\n\r\n    addUser =() => {\r\n\r\n        let rawData = {\r\n            name : this.state.name,\r\n            age : this.state.age,\r\n            place : this.state.place\r\n           \r\n        }\r\n\r\n        let tempUser = this.state.users;\r\n        tempUser.push(rawData);\r\n        this.setState({\r\n            users : tempUser,\r\n           \r\n            name : \"\",\r\n            age : \"\",\r\n            place : \"\"\r\n        })\r\n\r\n        \r\n\r\n\r\n\r\n    }\r\n\r\n    delUser = (index) => {\r\n        let temp = this.state.users;\r\n       //let tem = temp.splice(index, 1); // this doesnot work\r\n      temp.splice(index, 1);\r\n        this.setState({\r\n            users : temp\r\n        })\r\n\r\n\r\n    }\r\n\r\n    editUser = (userData, i) => {\r\n\r\n        this.setState({\r\n            name : userData.name,\r\n            age : userData.age,\r\n            place : userData.place,\r\n            btn_status : false,\r\n            updated_index : i\r\n        })\r\n    // this.state.users.name = userData.name;\r\n    // this.state.users.age = userData.age;\r\n    // this.state.users.place = userData.place\r\n\r\n    }\r\n    updateUser = () => {\r\n     \r\n\r\n    //    let tempData = this.state.users;\r\n    //what is this return aftr if\r\n    //How does it match for current user\r\n      let tempData =  this.state.users.map((user, i) => {\r\n           if(this.state.updated_index == i){\r\n            return {\r\n                      \r\n            name : this.state.name,\r\n            age : this.state.age,\r\n            place : this.state.place\r\n         }\r\n           } \r\n           return user\r\n       })\r\n\r\n       this.setState({\r\n          users : tempData \r\n       })\r\n    //    tempData.push(updateData);\r\n    //    this.setState({\r\n    //     users : tempData\r\n    // })  \r\n    \r\n\r\n\r\n    }\r\n\r\n    render(){\r\n\r\n     let btn_content = null;\r\n     if(this.state.btn_status){\r\n         btn_content = (<button onClick={this.addUser}>Add user</button>);\r\n     }\r\n     else{\r\n         btn_content = (<button onClick={this.updateUser}>Update user</button>);\r\n     }\r\n        \r\n        return (\r\n            <div>\r\n                Name : <input value={this.state.name} onChange={(e) => this.setState({\r\n                    name : e.target.value\r\n                })}/><br/>\r\n                Age : <input value={this.state.age} onChange={(e)=> this.setState({\r\n                   age : e.target.value\r\n                })\r\n\r\n                }/><br/>\r\n                Place : <input value={this.state.place} onChange={(e)=>this.setState({\r\n                  place : e.target.value\r\n                })}/><br/>\r\n               {/* {this.state.btn_status?  <button onClick={this.addUser}>Add user</button>\r\n         : <button onClick={this.addUser}>Update user</button>\r\n        } */}\r\n        {btn_content}\r\n            <table>\r\n                <th>Name :</th>\r\n                <th>Age :</th>\r\n                <th>Place :</th>\r\n\r\n             {this.state.users.map((user, i) => {\r\n                 return(\r\n                     <tr>\r\n                       <td>{user.name}</td>  \r\n                       <td>{user.age}</td>\r\n                       <td>{user.place}</td>\r\n                       <td><button onClick={() =>this.delUser(i)}>Del</button></td>\r\n                       <td><button onClick={() => this.editUser(user, i)}>Edit</button></td>\r\n                     </tr>\r\n                 )\r\n             })}\r\n            </table>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Person;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Posts from './Posts'\nimport * as serviceWorker from './serviceWorker';\nimport Employee from './Employee';\nimport Person from \"./components/Person\"\n\nReactDOM.render(<Person />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}